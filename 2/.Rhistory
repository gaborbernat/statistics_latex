demo()
help.start()
shinyUI(bootstrapPage(
selectInput(inputId = "n_breaks",
label = "Number of bins in histogram (approximate):",
choices = c(10, 20, 35, 50),
selected = 20),
checkboxInput(inputId = "individual_obs",
label = strong("Show individual observations"),
value = FALSE),
checkboxInput(inputId = "density",
label = strong("Show density estimate"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
# Display this only if the density is shown
conditionalPanel(condition = "input.density == true",
sliderInput(inputId = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
library(manipulate)
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(15,25))
cars
manipulate(
barplot(as.matrix(longley[,factor]),
beside = TRUE, main = factor),
factor = picker("GNP", "Unemployed", "Employed"))
manipulate(
plot(cars, xlim = c(0, x.max), type = type, ann = label),
x.max = slider(10, 25, step=5, initial = 25),
type = picker("Points" = "p", "Line" = "l", "Step" = "s"),
label = checkbox(TRUE, "Draw Labels"))
plot(cars, xlim = c(0, x.max), type = type, ann = label),
manipulate(
plot(cars, xlim = c(0, x.max), type = type, ann = label),
x.max = slider(10, 25, step=5, initial = 25),
type = picker("Points" = "p", "Line" = "l", "Step" = "s"),
label = checkbox(TRUE, "Draw Labels"))
age <- c(1, 3, 5, 2, 11, 9, 3, 9, 12, 3)
weight <- c(4.4, 5.3, 7.2, 5.2, 8.5, 7.3, 6, 10.4,
10.2, 6.1)
mean(weight)
sd(weight)
cor(age, weight)
plot(age, weight)
x <- rnorm(10)
x
plot(x)
seq
seq(1,10)
seq(1,5)
plot( seq(1,10), rnorm(10))
plot( seq(1,10), rnorm(10))
plot( seq(1,10), rnorm(10))
plot( seq(1,10), rnorm(10))
plot(x)
plot( seq(1,10), rnorm(10))
plot(x)
plot(x)
plot(x)
plot(x, type='o')
plot( seq(1,10), rnorm(10), type='o')
plot( seq(1,10), rnorm(10), type='o')
plot( seq(1,10), rnorm(10), type='o')
plot( seq(1,10), rnorm(10), type='o')
plot( seq(1,10), rnorm(10), type='o')
plot( seq(1,10), rnorm(10), type='o')
plot( seq(1,10), rnorm(10), type='o')
plot( seq(1,10), rnorm(10), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='o')
help plot
plot( seq(1,10), sort(rnorm(10)), type='b')
plot( seq(1,10), sort(rnorm(10)), type='l')
plot( seq(1,10), sort(rnorm(10)), type='c')
plot( seq(1,10), sort(rnorm(10)), type='b')
plot( seq(1,10), sort(rnorm(10)), type='o')
plot( seq(1,10), sort(rnorm(10)), type='b')
plot( seq(1,10), sort(rnorm(10)), type='s')
plot( seq(1,10), sort(rnorm(10)), type='S')
plot( seq(1,10), sort(rnorm(10)), type='S')
plot( seq(1,10), sort(rnorm(10)), type='s')
plot( seq(1,10), sort(rnorm(10)), type='s')
plot( seq(1,10), sort(rnorm(10)), type='s')
plot( seq(1,10), sort(rnorm(10)), type='S')
plot( seq(1,10), rnorm(10), type='S')
plot( seq(1,10), rnorm(10), type='S')
plot( seq(1,10), rnorm(10), type='S')
plot( seq(1,10), rnorm(10), type='S')
plot( seq(1,10), rnorm(10), type='s')
plot( seq(1,10), rnorm(10), type='s')
plot( seq(1,10), rnorm(10), type='s')
plot( seq(1,10), rnorm(10), type='b')
plot( seq(1,10), rnorm(10), type='b')
plot( seq(1,10), rnorm(10), type='b')
plot( seq(1,10), rnorm(10), type='p')
plot( seq(1,10), rnorm(10), type='o')
plot( seq(1,10), rnorm(10), type='h')
plot( seq(1,10), rnorm(10), type='h')
plot( seq(1,10), rnorm(10), type='h')
plot( seq(1,10), rnorm(10), type='h')
plot( seq(1,10), rnorm(10), type='h')
plot( seq(1,10), rnorm(10), type='h')
plot( seq(1,10), rnorm(10), type='h')
plot( seq(1,10), rnorm(10), type='h')
plot( seq(1,10), rnorm(10), type='h')
plot( seq(1,10), rnorm(10), type='h')
plot( seq(1,10), rnorm(10), type='h')
plot( seq(1,10), rnorm(10), type='h')
plot( seq(1,10), rnorm(10), type='h')
plot( seq(1,10), rnorm(10), type='o')
plot( seq(1,10), rnorm(10), type='b')
plot( seq(1,10), rnorm(10), type='b')
help('plot')
source('~/eclipse/latex/stat/statistics/src/tst/testiing.R')
setwd('~/eclipse/latex/stat/statistics/src/2')
source('~/eclipse/latex/stat/statistics/src/tst/testiing.R')
Sweave('boxplots.Rnw')
Sweave('boxplots.Rnw')
Countries = read.table('LifeGDPhiv.txt')
colnames(Countries) = c('Country', 'LifeExp', 'GDP', 'HIV')
attach(Countries)
plot(GDP, LifeExp, xlab='GDP per capita (2000 US $)', ylab='Life Expectancy (years)', main='Scatterplot: Life Expectancy versus GDP per capita')
cor(GDP, LifeExp)
cor(LifeExp, GDP)
Sweave('correlation.Rnw')
9/52
x = matrix(c(43,44,9,4), byrow=TRUE)
x
x = matrix(c(43,44,9,4), 2,2,byrow=TRUE)
x
library(gmodels)
CrossTable(x)
z=CrossTable(x)
z
